/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zalando-incubator/es-operator/pkg/apis/zalando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticsearchDataSetLister helps list ElasticsearchDataSets.
// All objects returned here must be treated as read-only.
type ElasticsearchDataSetLister interface {
	// List lists all ElasticsearchDataSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ElasticsearchDataSet, err error)
	// ElasticsearchDataSets returns an object that can list and get ElasticsearchDataSets.
	ElasticsearchDataSets(namespace string) ElasticsearchDataSetNamespaceLister
	ElasticsearchDataSetListerExpansion
}

// elasticsearchDataSetLister implements the ElasticsearchDataSetLister interface.
type elasticsearchDataSetLister struct {
	indexer cache.Indexer
}

// NewElasticsearchDataSetLister returns a new ElasticsearchDataSetLister.
func NewElasticsearchDataSetLister(indexer cache.Indexer) ElasticsearchDataSetLister {
	return &elasticsearchDataSetLister{indexer: indexer}
}

// List lists all ElasticsearchDataSets in the indexer.
func (s *elasticsearchDataSetLister) List(selector labels.Selector) (ret []*v1.ElasticsearchDataSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ElasticsearchDataSet))
	})
	return ret, err
}

// ElasticsearchDataSets returns an object that can list and get ElasticsearchDataSets.
func (s *elasticsearchDataSetLister) ElasticsearchDataSets(namespace string) ElasticsearchDataSetNamespaceLister {
	return elasticsearchDataSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticsearchDataSetNamespaceLister helps list and get ElasticsearchDataSets.
// All objects returned here must be treated as read-only.
type ElasticsearchDataSetNamespaceLister interface {
	// List lists all ElasticsearchDataSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ElasticsearchDataSet, err error)
	// Get retrieves the ElasticsearchDataSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ElasticsearchDataSet, error)
	ElasticsearchDataSetNamespaceListerExpansion
}

// elasticsearchDataSetNamespaceLister implements the ElasticsearchDataSetNamespaceLister
// interface.
type elasticsearchDataSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticsearchDataSets in the indexer for a given namespace.
func (s elasticsearchDataSetNamespaceLister) List(selector labels.Selector) (ret []*v1.ElasticsearchDataSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ElasticsearchDataSet))
	})
	return ret, err
}

// Get retrieves the ElasticsearchDataSet from the indexer for a given namespace and name.
func (s elasticsearchDataSetNamespaceLister) Get(name string) (*v1.ElasticsearchDataSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("elasticsearchdataset"), name)
	}
	return obj.(*v1.ElasticsearchDataSet), nil
}
